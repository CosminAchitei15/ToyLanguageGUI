PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}]}, 
	symTable=MyDictionary{map={}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, int v]}, 
	symTable=MyDictionary{map={}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, int v]}, 
	symTable=MyDictionary{map={}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, int v]}, 
	symTable=MyDictionary{map={}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=, 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=0}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=1}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=2}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=3}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=4}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=5}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}, PrintStatement{expression=v}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, AssignmentStatement{id='v', exp=v + 1}]}, 
	symTable=MyDictionary{map={v=6}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 1 {
	exeStack=MyStack{stack=[]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=CompStatement{head=int v, tail=CompStatement{head=ForkStatement{statement=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}, tail=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}PrgState for thread number 2 {
	exeStack=MyStack{stack=[]}, 
	symTable=MyDictionary{map={v=7}}, 
	out=0 0 1 1 2 2 3 3 4 4 5 5 6 6 , 
	originalProgram=while(v < 7) {CompStatement{head=PrintStatement{expression=v}, tail=AssignmentStatement{id='v', exp=v + 1}}}, 
	fileTable=MyDictionary{map={}}, 
	heap =MyHeap{heap={}}
}